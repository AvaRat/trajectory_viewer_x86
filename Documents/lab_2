	.data
prompt: .asciiz "put a string of digits\n"
input: .space 100
output: .space 100
lenght: .byte 0
min: .byte 'z'

	.text
	.globl main
main:
	la $a0, prompt
	li $v0, 4
	syscall
	
	li $s1, 'a'
	li $s2, 'z'
	li $s3, '\n'
	la $s4, input
	la $s5, lenght
	lb $t7, ($s5)
	
read:	

	li $v0, 12
	syscall
	
	beq $v0, $s3, next	#if '\n' go next
	bgt $v0, $s2, read
	blt $v0, $s1, read	
	sb $v0, ($s4)
	addi $s4, $s4, 1
	addi $t7, $t7, 1
	b read
	
next:
	addi $s4, $s4, 1
	sb $v0, ($t4)	#write '\n' to input string
	sb $t7, ($s5)	#holds lenght of input
	
	la $a1, input
	li $v0, 4
	syscall

	la $s3, output
	
	
	la $s0, min
	lb $t6, ($s0)
	li $a0, 0
	
ab:
	beq $a0, $t7, end
	la $s4, input
	li $t1, 0
	li $t5, 0
	sb $t4, ($s3)

	addi $s3, $s3, 1 #increment output
	addi $a0, $a0, 1
		
	###
find_min:
	beq $t7, $t5, ab
	lb $t4, ($s4)
	bge $t4, $t6, a
	beqz $t4, a
	sb $t4, ($s0)		##stores new min value in min ($s0)
	sb $a0, ($s4)		#save previous min value in input
	move $t6, $t4
a:	
	
	li $a0, 10	
	addi $s4, $s4, 1	#increment input addres
	addi $t5, $t5, 1 	#increment counter
	b find_min
	###	

end:
	addi $s3, $s3, 1
	la $a0, output
	li $v0, 4
	syscall
	
	sb $t7, ($s5)
	li $v0, 1
	la $t1, lenght
	lb $a0, ($t1)
	syscall
	

	
	li $v0, 10
	syscall
